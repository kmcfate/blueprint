.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "BLUEPRINT" "7" "April 2011" "DevStructure" "Blueprint"
.
.SH "NAME"
\fBblueprint\fR \- Blueprint Python library
.
.SH "SYNPOSIS"
.
.nf

import blueprint

b = blueprint\.Blueprint(name=\'foo\', create=True)
b\.commit()

b\.puppet()\.dumpf(gzip=True)
b\.chef()\.dumpf(gzip=True)
b\.sh()\.dumpf(gzip=True)
.
.fi
.
.SH "DESCRIPTION"
.
.SS "blueprint\.Blueprint"
The \fBblueprint\.Blueprint\fR class manages blueprints stored in the local blueprint repository using the \fBgit\fR(1) tools\. New blueprints are created by passing the \fBcreate=True\fR keyword argument to \fBblueprint\.Blueprint\fR\. Previously committed blueprints are referenced by passing the \fBname=\fR\fIname\fR keyword argument and optionally \fBcommit=\fR\fIcommit\fR\.
.
.P
\fBblueprint\.Blueprint\fR objects may be subtracted from one another\.
.
.P
\fBblueprint\.Blueprint\fR objects support the following properties:
.
.TP
\fBarch\fR
The architecture of the system that created the blueprint\. Only present if the blueprint contains source tarballs\.
.
.TP
\fBfiles\fR
A dictionary that maps path names to file properties\. Each object contains \fBcontent\fR, \fBencoding\fR, \fBgroup\fR, \fBmode\fR, and \fBowner\fR\.
.
.TP
\fBmanagers\fR
A computed dictionary of each package manager mapped to its package manager\. Useful for reversing the algorithm described in \fBblueprint\fR(5)\.
.
.TP
\fBname\fR
This blueprint\'s name\.
.
.TP
\fBpackages\fR
A dictionary of package managers that map to dictionaries of managed packages mapped to a list of version numbers to be installed\.
.
.TP
\fBsources\fR
A dictionary that maps directory names to the name of the tarball that contains the files to be extracted there\.
.
.P
\fBdumps()\fR serializes and returns the blueprint as JSON\.
.
.P
\fBcommit(message=\fR\fI\'\'\fR\fB)\fR records a new revision of this blueprint, optionally with \fImessage\fR as its Git commit message\.
.
.P
\fBpuppet()\fR, \fBchef()\fR, \fBsh()\fR return \fBManifest\fR, \fBCookbook\fR, and \fBScript\fR objects, respectively\. See the next section\.
.
.P
\fBwalk()\fR is a generic implementation of the package walking algorithm described in \fBblueprint\fR(5)\.
.
.P
The \fBblueprint\.Blueprint\fR class (not individual instances) supports \fBdestroy(\fR\fIname\fR\fB)\fR to destroy blueprints and \fBiter()\fR to iterate over the names of blueprints\.
.
.SS "blueprint\.puppet, blueprint\.chef, and blueprint\.sh"
\fBblueprint\.puppet\.Manifest\fR, \fBblueprint\.chef\.Cookbook\fR, and \fBblueprint\.sh\.Script\fR all implement similar interfaces to code generation\.
.
.P
\fBdumps()\fR returns a string containing code in the language implemented by the class that received the call\. If the blueprint contains source tarballs, \fBdumps()\fR may raise \fBValueError\fR\.
.
.P
\fBdumpf(gzip=\fR\fIFalse\fR\fB)\fR returns the name of a file, possibly in a newly\-created directory, containing code in the language implemented by the class that received the call\. The file or directory is created in the current working directory\. If \fBgzip=\fR\fITrue\fR, the file or directory will compressed and the resulting tarball will be left in the current working directory\.
.
.SS "blueprint\.manager"
The \fBblueprint\.manager\.Manager\fR class is a \fBdict\fR subclass that is used as the value associated with each package manager name\. It is a callable that can translate package names and versions into shell commands for installing the package\. For example: \fBblueprint\.manager\.Manager(\fR\fI\'apt\'\fR\fB)(\fR\fI\'python\'\fR\fB,\fR\fI\'2\.6\.6\-2ubuntu1\'\fR\fB)\fR\.
.
.SS "blueprint\.backend"
The \fBblueprint\.backend\fR module implements \fBblueprint\-create\fR(1)\. Each module within (for example, \fBblueprint\.backend\.apt\fR) must contain a function by the same name (in the example, \fBblueprint\.backend\.apt\.apt\fR) which accepts a \fBblueprint\.Blueprint\fR object as its only argument\. When \fBblueprint\.backend\fR is imported, it finds all such functions, lists them in \fBblueprint\.backend\.__all__\fR, and imports the function\. Use the backend functions thus:
.
.IP "" 4
.
.nf

import blueprint
import blueprint\.backend
b = blueprint\.Blueprint(name=\'foo\')
for funcname in blueprint\.backend\.__all__:
    getattr(blueprint\.backend, funcname)(b)
.
.fi
.
.IP "" 0
.
.SS "blueprint\.git"
The \fBblueprint\.git\fR module exposes the \fBgit\fR(1) tools to Python via the standard \fBsubprocess\fR module\. \fBblueprint\.git\.git\fR is a direct proxy to running arbitrary Git commands\. Several commands have been wrapped specially to expose their results:
.
.TP
\fBblueprint\.git\.rev_parse(\fR\fIrefname\fR\fB)\fR
Return the commit associated with \fIrefname\fR\.
.
.TP
\fBblueprint\.git\.tree(\fR\fIcommit\fR\fB)\fR
Return the tree SHA associated with \fIcommit\fR\.
.
.TP
\fBblueprint\.git\.ls_tree(\fR\fItree\fR\fB)\fR
Generate the mode, type, SHA, and relative pathname of each file in \fItree\fR recursively\.
.
.TP
\fBblueprint\.git\.blob(\fR\fItree\fR\fB,\fR\fIpathname\fR\fB)\fR
Return the blob SHA associated with \fIpathname\fR in \fItree\fR\.
.
.TP
\fBblueprint\.git\.content(\fR\fIblob\fR\fB)\fR
Return the contents of \fIblob\fR\.
.
.TP
\fBblueprint\.git\.write_tree()\fR
Return the tree that results from writing the current index to the object store\.
.
.TP
\fBblueprint\.git\.commit_tree(\fR\fItree\fR\fB,\fR\fImessage\fR\fB,\fR\fIparent\fR\fB)\fR
Return the commit for \fItree\fR and \fIparent\fR with \fImessage\fR\.
.
.SS "blueprint\.context_managers"
The \fBblueprint\.context_managers\fR module implements context managers used throughout \fBblueprint\fR(1)\.
.
.TP
\fBblueprint\.context_managers\.cd(\fR\fInew_cwd\fR\fB)\fR
Execute in a different working directory\. The property \fBold_cwd\fR is available on the context object containing the previous working directory\.
.
.TP
\fBblueprint\.context_managers\.mkdtemp(dir=\fR\fINone\fR\fB)\fR
Create a temporary directory and execute with it as the working directory\. The property \fBcwd\fR is available on the context object containing the previous working directory\. When the context closes, the temporary directory and all its contents are removed recursively\.
.
.SH "FILES"
.
.TP
\fB~/\.blueprints\.git\fR
The local repsitory where blueprints are stored, each on its own branch\.
.
.SH "THEME SONG"
The Flaming Lips \- "The W\.A\.N\.D\. (The Will Always Negates Defeat)"
.
.SH "AUTHOR"
Richard Crowley \fIrichard@devstructure\.com\fR
.
.SH "SEE ALSO"
Part of \fBblueprint\fR(1)\.
